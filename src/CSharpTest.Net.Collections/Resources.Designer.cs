using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;

namespace CSharpTest.Net.Collections
{
    /// <summary>
    ///     A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This partial class was auto-generated by the StronglyTypedResourceBuilder
    // partial class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    internal class Resources
    {
        private static ResourceManager _resourceMan;

        /// <summary>
        ///     Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static ResourceManager ResourceManager
        {
            get
            {
                if (ReferenceEquals(_resourceMan, null))
                {
                    Assembly assembly = typeof(Resources).GetTypeInfo().Assembly;
                    string[] names = assembly.GetManifestResourceNames();

                    ResourceManager temp = new ResourceManager("CSharpTest.Net.Collections", assembly);
                    _resourceMan = temp;
                }
                return _resourceMan;
            }
        }

        /// <summary>
        ///     Overrides the current thread's CurrentUICulture property for all
        ///     resource lookups using this strongly typed resource class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static CultureInfo Culture { get; set; }

        /// <summary>
        ///     Looks up a localized string similar to Failed to compress/decompress the full input stream..
        /// </summary>
        internal static string IOStreamCompressionFailed => ResourceManager.GetString("IOStreamCompressionFailed", Culture);

        /// <summary>
        ///     Looks up a localized string similar to Failed to read from input stream..
        /// </summary>
        internal static string IOStreamFailedToRead => ResourceManager.GetString("IOStreamFailedToRead", Culture);

        /// <summary>
        ///     Looks up a localized string similar to The running process must first exit..
        /// </summary>
        internal static string ProcessRunnerAlreadyRunning => ResourceManager.GetString("ProcessRunnerAlreadyRunning", Culture);


        /// <summary>
        ///     The singleton for type {0} threw an excpetion.
        /// </summary>
        public static string FailedToConstructSingleton(Type type)
        {
            return string.Format(Culture, FormatStrings.FailedToConstructSingleton_System_Type_type_, type);
        }

        /// <summary>
        ///     Invalid file extension: '{0}'.
        /// </summary>
        public static string InvalidFileExtension(string ext)
        {
            return string.Format(Culture, FormatStrings.InvalidFileExtension_string_ext_, ext);
        }

        /// <summary>
        ///     The type {0} is not convertable from a string.
        /// </summary>
        public static string StringConverterTryParse(Type type)
        {
            return string.Format(Culture, FormatStrings.StringConverterTryParse_System_Type_type_, type);
        }

        /// <summary>
        ///     Returns the raw format strings.
        /// </summary>
        [DebuggerStepThrough]
        [DebuggerNonUserCode]
        [CompilerGenerated]
        [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
        public static class FormatStrings
        {
            /// <summary>
            ///     The singleton for type {0} threw an excpetion.
            /// </summary>
            public static string FailedToConstructSingleton_System_Type_type_ =>
                ResourceManager.GetString("FailedToConstructSingleton(System.Type type)", Culture);

            /// <summary>
            ///     Invalid file extension: '{0}'.
            /// </summary>
            public static string InvalidFileExtension_string_ext_ =>
                ResourceManager.GetString("InvalidFileExtension(string ext)", Culture);

            /// <summary>
            ///     The type {0} is not convertable from a string.
            /// </summary>
            public static string StringConverterTryParse_System_Type_type_ =>
                ResourceManager.GetString("StringConverterTryParse(System.Type type)", Culture);
        }

        /// <summary>
        ///     Returns the raw exception strings.
        /// </summary>
        [DebuggerStepThrough]
        [DebuggerNonUserCode]
        [CompilerGenerated]
        [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
        public static class ExceptionStrings
        {
            /// <summary>
            ///     A runtime assertion failed while performing the operation.
            /// </summary>
            public static string AssertionFailedException =>
                ResourceManager.GetString("AssertionFailedException", Culture);

            /// <summary>
            ///     A runtime assertion failed: {0}
            /// </summary>
            public static string AssertionFailedException_string_message_ =>
                ResourceManager.GetString("AssertionFailedException(string message)", Culture);

            /// <summary>
            ///     A lock timeout has expired due to a possible deadlock.
            /// </summary>
            public static string DeadlockException => ResourceManager.GetString("DeadlockException", Culture);

            /// <summary>
            ///     Debug Assertion Failed: {0}
            /// </summary>
            public static string DebugAssertionFailedException_string_message_ =>
                ResourceManager.GetString("DebugAssertionFailedException(string message)", Culture);

            /// <summary>
            ///     The specified key already exists in the collection.
            /// </summary>
            public static string DuplicateKeyException => ResourceManager.GetString("DuplicateKeyException", Culture);

            /// <summary>
            ///     The configuration value '{0}' is invalid.
            /// </summary>
            public static string InvalidConfigurationValueException_string_property_ =>
                ResourceManager.GetString("InvalidConfigurationValueException(string property)", Culture);

            /// <summary>
            ///     The configuration value '{0}' is invalid.
            ///     {1}
            /// </summary>
            public static string InvalidConfigurationValueException_string_property__string_message_ =>
                ResourceManager.GetString("InvalidConfigurationValueException(string property, string message)",
                    Culture);

            /// <summary>
            ///     A storage handle was invalid or has been corrupted.
            /// </summary>
            public static string InvalidNodeHandleException =>
                ResourceManager.GetString("InvalidNodeHandleException", Culture);

            /// <summary>
            ///     The LurchTable internal datastructure appears to be corrupted.
            /// </summary>
            public static string LurchTableCorruptionException =>
                ResourceManager.GetString("LurchTableCorruptionException", Culture);

            /// <summary>
            ///     Failed to aquire the lock in the specified time.
            /// </summary>
            public static string LockTimeoutException => ResourceManager.GetString("LockTimeoutException", Culture);

            /// <summary>
            ///     Formats a message for an exception
            /// </summary>
            internal static string SafeFormat(string message, params object[] args)
            {
                try
                {
                    return string.Format(Culture, message, args);
                }
                catch
                {
                    return message ?? string.Empty;
                }
            }

            /// <summary>
            /// </summary>
            internal static string HelpLinkFormat(int hResult, string typeName)
            {
                return SafeFormat("", hResult, typeName);
            }
        }
    }

    /// <summary>
    ///     Exception class: AssertionFailedException
    ///     A runtime assertion failed while performing the operation.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class AssertionFailedException : BaseAssertionException
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected AssertionFailedException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     A runtime assertion failed while performing the operation.
        /// </summary>
        public AssertionFailedException()
            : this(null, -1, Resources.ExceptionStrings.AssertionFailedException)
        {
        }

        /// <summary>
        ///     A runtime assertion failed while performing the operation.
        /// </summary>
        public AssertionFailedException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.AssertionFailedException)
        {
        }

        /// <summary>
        ///     A runtime assertion failed: {0}
        /// </summary>
        public AssertionFailedException(string message)
            : this(null, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.AssertionFailedException_string_message_, message))
        {
        }

        /// <summary>
        ///     A runtime assertion failed: {0}
        /// </summary>
        public AssertionFailedException(string message, Exception innerException)
            : this(innerException, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.AssertionFailedException_string_message_, message))
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new AssertionFailedException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws A runtime assertion failed while performing the operation.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new AssertionFailedException();
        }

        /// <summary>
        ///     if(condition == false) throws A runtime assertion failed: {0}
        /// </summary>
        public static void Assert(bool condition, string message)
        {
            if (!condition) throw new AssertionFailedException(message);
        }
    }

    /// <summary>
    ///     Exception class: DeadlockException
    ///     A lock timeout has expired due to a possible deadlock.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class DeadlockException : BaseAssertionException
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected DeadlockException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     A lock timeout has expired due to a possible deadlock.
        /// </summary>
        public DeadlockException()
            : this(null, -1, Resources.ExceptionStrings.DeadlockException)
        {
        }

        /// <summary>
        ///     A lock timeout has expired due to a possible deadlock.
        /// </summary>
        public DeadlockException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.DeadlockException)
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new DeadlockException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws A lock timeout has expired due to a possible deadlock.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new DeadlockException();
        }
    }

    /// <summary>
    ///     Exception class: DebugAssertionFailedException
    ///     Debug Assertion Failed: {0}
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class DebugAssertionFailedException : Exception
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected DebugAssertionFailedException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     Debug Assertion Failed: {0}
        /// </summary>
        public DebugAssertionFailedException(string message)
            : this(null, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.DebugAssertionFailedException_string_message_, message))
        {
        }

        /// <summary>
        ///     Debug Assertion Failed: {0}
        /// </summary>
        public DebugAssertionFailedException(string message, Exception innerException)
            : this(innerException, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.DebugAssertionFailedException_string_message_, message))
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new DebugAssertionFailedException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws Debug Assertion Failed: {0}
        /// </summary>
        public static void Assert(bool condition, string message)
        {
            if (!condition) throw new DebugAssertionFailedException(message);
        }
    }

    /// <summary>
    ///     Exception class: DuplicateKeyException
    ///     The specified key already exists in the collection.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class DuplicateKeyException : Exception
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected DuplicateKeyException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     The specified key already exists in the collection.
        /// </summary>
        public DuplicateKeyException()
            : this(null, -1, Resources.ExceptionStrings.DuplicateKeyException)
        {
        }

        /// <summary>
        ///     The specified key already exists in the collection.
        /// </summary>
        public DuplicateKeyException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.DuplicateKeyException)
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new DuplicateKeyException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws The specified key already exists in the collection.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new DuplicateKeyException();
        }
    }

    /// <summary>
    ///     Exception class: InvalidConfigurationValueException
    ///     The configuration value '{0}' is invalid.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class InvalidConfigurationValueException : ArgumentException
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected InvalidConfigurationValueException(Exception innerException, int hResult, string message) : base(
            message, innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     The configuration value '{0}' is invalid.
        /// </summary>
        public InvalidConfigurationValueException(string property)
            : this(null, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.InvalidConfigurationValueException_string_property_, property))
        {
        }

        /// <summary>
        ///     The configuration value '{0}' is invalid.
        /// </summary>
        public InvalidConfigurationValueException(string property, Exception innerException)
            : this(innerException, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.InvalidConfigurationValueException_string_property_, property))
        {
        }

        /// <summary>
        ///     The configuration value '{0}' is invalid.
        ///     {1}
        /// </summary>
        public InvalidConfigurationValueException(string property, string message)
            : this(null, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.InvalidConfigurationValueException_string_property__string_message_,
                    property, message))
        {
        }

        /// <summary>
        ///     The configuration value '{0}' is invalid.
        ///     {1}
        /// </summary>
        public InvalidConfigurationValueException(string property, string message, Exception innerException)
            : this(innerException, -1,
                Resources.ExceptionStrings.SafeFormat(
                    Resources.ExceptionStrings.InvalidConfigurationValueException_string_property__string_message_,
                    property, message))
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new InvalidConfigurationValueException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws The configuration value '{0}' is invalid.
        /// </summary>
        public static void Assert(bool condition, string property)
        {
            if (!condition) throw new InvalidConfigurationValueException(property);
        }

        /// <summary>
        ///     if(condition == false) throws The configuration value '{0}' is invalid.
        ///     {1}
        /// </summary>
        public static void Assert(bool condition, string property, string message)
        {
            if (!condition) throw new InvalidConfigurationValueException(property, message);
        }
    }

    /// <summary>
    ///     Exception class: InvalidNodeHandleException
    ///     A storage handle was invalid or has been corrupted.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class InvalidNodeHandleException : BaseAssertionException
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected InvalidNodeHandleException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     A storage handle was invalid or has been corrupted.
        /// </summary>
        public InvalidNodeHandleException()
            : this(null, -1, Resources.ExceptionStrings.InvalidNodeHandleException)
        {
        }

        /// <summary>
        ///     A storage handle was invalid or has been corrupted.
        /// </summary>
        public InvalidNodeHandleException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.InvalidNodeHandleException)
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new InvalidNodeHandleException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws A storage handle was invalid or has been corrupted.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new InvalidNodeHandleException();
        }
    }

    /// <summary>
    ///     Exception class: LurchTableCorruptionException
    ///     The LurchTable internal datastructure appears to be corrupted.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class LurchTableCorruptionException : Exception
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected LurchTableCorruptionException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     The LurchTable internal datastructure appears to be corrupted.
        /// </summary>
        public LurchTableCorruptionException()
            : this(null, -1, Resources.ExceptionStrings.LurchTableCorruptionException)
        {
        }

        /// <summary>
        ///     The LurchTable internal datastructure appears to be corrupted.
        /// </summary>
        public LurchTableCorruptionException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.LurchTableCorruptionException)
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new LurchTableCorruptionException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws The LurchTable internal datastructure appears to be corrupted.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new LurchTableCorruptionException();
        }
    }

    /// <summary>
    ///     Exception class: LockTimeoutException
    ///     Failed to aquire the lock in the specified time.
    /// </summary>
    [DebuggerStepThrough]
    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("CSharpTest.Net.Generators", "2.0")]
    public class LockTimeoutException : TimeoutException
    {
        /// <summary>
        ///     Constructs the exception from an hresult and message bypassing the message formatting
        /// </summary>
        protected LockTimeoutException(Exception innerException, int hResult, string message) : base(message,
            innerException)
        {
            HResult = hResult;
            HelpLink = Resources.ExceptionStrings.HelpLinkFormat(HResult, GetType().FullName);
        }

        /// <summary>
        ///     Failed to aquire the lock in the specified time.
        /// </summary>
        public LockTimeoutException()
            : this(null, -1, Resources.ExceptionStrings.LockTimeoutException)
        {
        }

        /// <summary>
        ///     Failed to aquire the lock in the specified time.
        /// </summary>
        public LockTimeoutException(Exception innerException)
            : this(innerException, -1, Resources.ExceptionStrings.LockTimeoutException)
        {
        }

        /// <summary>
        ///     Used to create this exception from an hresult and message bypassing the message formatting
        /// </summary>
        internal static Exception Create(int hResult, string message)
        {
            return new LockTimeoutException(null, hResult, message);
        }

        /// <summary>
        ///     if(condition == false) throws Failed to aquire the lock in the specified time.
        /// </summary>
        public static void Assert(bool condition)
        {
            if (!condition) throw new LockTimeoutException();
        }
    }
}